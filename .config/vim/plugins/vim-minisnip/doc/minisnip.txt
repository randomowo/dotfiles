*minisnip*  *minisnip.txt*  super lightweight snippet manager

Author:  Keyboard Fire <andy@keyboardfire.com>
License: MIT

                               _       _           _        ~
                     _ __ ___ (_)_ __ (_)___ _ __ (_)_ __   ~
                    | '_ ` _ \| | '_ \| / __| '_ \| | '_ \  ~
                    | | | | | | | | | | \__ \ | | | | |_) | ~
                    |_| |_| |_|_|_| |_|_|___/_| |_|_| .__/  ~
                                                    |_|     ~

1. Overview                    |minisnip-overview|
2. Mappings                    |minisnip-mappings|
3. Configuration               |minisnip-configuration|
4. Miscellaneous               |minisnip-miscellaneous|

===============================================================================
OVERVIEW                                                    *minisnip-overview*

Minisnip is a plugin that allows you to quickly insert "templates" into
files. Among all the other snippet plugins out there, the primary goal of
minisnip is to be as minimal and lightweight as possible.

To get started with minisnip, create a directory called `~/.vim/minisnip`.
Then placing a file called `foo` inside of it will create the `foo` snippet,
which you can access by typing  foo<Tab>  in insert mode.

Filetype-aware snippets are also available. For example, a file called
`_java_main` will create a `main` snippet only when |filetype|=java, allowing
you to add ex. a `_c_main` snippet and so on.

===============================================================================
MAPPINGS                                                    *minisnip-mappings*

-------------------------------------------------------------------------------
                    *minisnip_<Tab>*
<Tab>               In insert mode, expand a mapping or jump to the next
                    placeholder and enter select mode.
                    In select mode, jump to the next placeholder.

-------------------------------------------------------------------------------
                    *minisnip_<C-x><C-t>*
<C-x><C-t>          Start |ins-completion| for the snippet. Press <C-t> again
                    to go to the next snippet; press <CR> or <Tab> to complete
                    it.

===============================================================================
CONFIGURATION                                          *minisnip-configuration*

-------------------------------------------------------------------------------
                                                             *'g:minisnip_dir'*
Default: '~/.vim/minisnip'

A list of directories to look for snippet files. The list is separated by
colons on Unix platforms, and semicolons on Windows, similar to `$PATH`.

For example to share system-wide snippets: >
    let g:minisnip_dir = '/usr/share/minisnip:~/.vim/minisnip'
<
Minisnip adds the `minisnip` |filetype| for syntax highlighting to all files
matching `*/minisnip/*`. If you store your snippets in another directory then
you'll have to create your own |autocmd| to do this.

-------------------------------------------------------------------------------
                                                         *'g:minisnip_trigger'*
Default: '<Tab>'

Specifies which key expands snippets and jumps to the next placeholder. This
should be specified in the same format as you would use for a |:map|. For
example: >
    let g:minisnip_trigger = '<C-j>'
<

-------------------------------------------------------------------------------
                                                      *'g:minisnip_startdelim'*
                                                        *'g:minisnip_enddelim'*
Defaults: '{{+', '+}}'

The start and end delimiters of the placeholder string to use. For example,
with the default values, a sample snippet could look like this: >
    <!DOCTYPE html>
    <html lang='en'>
        <head>
            <title>{{+default title+}}</title>
        </head>
        <body>
            {{++}}
        </body>
    </html>
<

-------------------------------------------------------------------------------
                                                      *'g:minisnip_evalmarker'*
Default: '~'

Marks a template as meant to be executed as VimScript. With the default value,
this looks something like: >
    It has been {{+~localtime()+}} seconds since the Unix epoch
<
The placeholder is not selected, but instead after the evaluation the next
placeholder is selected. This behaviour can be altered with the
|'g:minisnip_donotskipmarker'|.

-------------------------------------------------------------------------------
                                                 *'g:minisnip_donotskipmarker'*
Default: '`'

By default when selecting a placeholder with the |'g:minisnip_evalmarker'| the
next placeholder is selected after evaluation. To mark a placeholder which is
to be evaluated so that it is selected after evaluation use the
|'g:minisnip_donotskipmarker'|. This way you can easily modify the value of
the snippet.

An example: >
    {{+`~strftime("%Y-%m-%d")+}}
<
This will be expanded to the current date and select the timestamp.

-------------------------------------------------------------------------------
                                                   *'g:minisnip_backrefmarker'*
Default: '\\~'

When this is present, followed by a single digit `n`, in a placeholder that
also starts with |'g:minisnip_evalmarker'|, it will be replaced with the `n`th
to last previous placeholder value, surrounded by quotes. Here is an example
of how it can be used: >
    #ifndef {{+INCLUDE_GUARD+}}
    #define {{+~\~1+}}

    {{++}}

    #endif
<
This will automatically fill the `#define` line with the value entered on the
`#ifndef` line upon jumping to it.

-------------------------------------------------------------------------------
                                                 *'g:minisnip_finalstartdelim'*
                                                   *'g:minisnip_finalenddelim'*
Defaults: '{{-', '-}}'

The start and end delimiters of the final placeholder string to use. While the
normal placeholders will be dealt with in the order they appear in the snippet,
these placeholders will be targeted last.>
    # BEGIN FUNCTON {{++}}
    {{--}}
    # END FUNCTION {{+~\~1+}}
<


 vim:tw=78:fo=tcq2:isk=!-~,^*,^\|,^\":ts=8:ft=help:norl:
