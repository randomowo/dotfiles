#!/bin/sh
# _____ __    _____ _____ _____ _____ _____
# |  _  |  |  |     |  _  |   __|   __|   __|
# |     |  |__|-   -|     |__   |   __|__   |
# |__|__|_____|_____|__|__|_____|_____|_____|
#
# by randomowo

# check size
alias \
    dcap="df -h /" \
    sizeof="du -sh"

# counting folders and files
alias count="ls -a | wc -l"

# cd aliases
alias \
    ..='cd ..' \
    ...='cd ../..' \

# ls -> eza
alias \
    ls='eza' \
    l='eza -lahgF -a' \
    ll='eza -lhgF' \
    lst='eza --tree' \
    lt='eza -lahgF --tree' \

# git aliases
alias \
    git-adog="git log --all --decorate --oneline --graph" \
    git-undo="git revert  --soft HEAD~1" \
    gshf="git show --pretty='' --name-only" \
    gloglm="git log -1 --pretty=%B" \
    gtar="git diff --name-only -a | tar Tzcf - diff.tgz" \
    gcham="git commit --amend --author=\"$(git config user.name) <$(git config user.email)>\"" \
    ga='git add' \
    gaa='git add --all' \
    gapa='git add --patch' \
    gau='git add --update' \
    gav='git add --verbose' \
    gap='git apply' \
    gapt='git apply --3way' \
    gb='git branch' \
    gba='git branch -a' \
    gbd='git branch -d' \
    gbda='git branch --no-color --merged | command grep -vE "^([+*]|\s*($(git_main_branch)|$(git_develop_branch))\s*$)" | command xargs git branch -d 2>/dev/null' \
    gbD='git branch -D' \
    gbl='git blame -b -w' \
    gbnm='git branch --no-merged' \
    gbr='git branch --remote' \
    gbs='git bisect' \
    gbsb='git bisect bad' \
    gbsg='git bisect good' \
    gbsr='git bisect reset' \
    gbss='git bisect start' \
    gc='git commit -v' \
    gc!='git commit -v --amend' \
    gcn!='git commit --no-edit --amend' \
    gca='git commit -a' \
    gca!='git commit -a --amend' \
    gcan!='git commit -a --no-edit --amend' \
    gcans!='git commit -a -s --no-edit --amend' \
    gcam='git commit -a -m' \
    gcsm='git commit -s -m' \
    gcas='git commit -a -s' \
    gcasm='git commit -a -s -m' \
    gcb='git checkout -b' \
    gcf='git config --list' \
    gcl='git clone --recurse-submodules' \
    gclean='git clean -id' \
    gpristine='git reset --hard && git clean -dffx' \
    gcm='git checkout $(git_main_branch)' \
    gcd='git checkout $(git_develop_branch)' \
    gcmsg='git commit -m' \
    gco='git checkout' \
    gcor='git checkout --recurse-submodules' \
    gcount='git shortlog -sn' \
    gcp='git cherry-pick' \
    gcpa='git cherry-pick --abort' \
    gcpc='git cherry-pick --continue' \
    gcs='git commit -S' \
    gcss='git commit -S -s' \
    gcssm='git commit -S -s -m' \
    gd='git diff' \
    gdca='git diff --cached' \
    gdcw='git diff --cached --word-diff' \
    gdct='git describe --tags $(git rev-list --tags --max-count=1)' \
    gds='git diff --staged' \
    gdt='git diff-tree --no-commit-id --name-only -r' \
    gdup='git diff @{upstream}' \
    gdw='git diff --word-diff' \
    gf='git fetch' \
    gfa='git fetch --all --prune' \
    gfo='git fetch origin' \
    gfg='git ls-files | grep' \
    gg='git gui citool' \
    gga='git gui citool --amend' \
    ggpur='ggu' \
    ggpull='git pull origin "$(git_current_branch)"' \
    ggpush='git push origin "$(git_current_branch)"' \
    ggsup='git branch --set-upstream-to=origin/$(git_current_branch)' \
    gpsup='git push --set-upstream origin $(git_current_branch)' \
    ghh='git help' \
    gignore='git update-index --assume-unchanged' \
    gignored='git ls-files -v | grep "^[[:lower:]]"' \
    gl='git pull' \
    glg='git log --stat' \
    glgp='git log --stat -p' \
    glgg='git log --graph' \
    glgga='git log --graph --decorate --all' \
    glgm='git log --graph --max-count=10' \
    glo='git log --oneline --decorate' \
    glol="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'" \
    glols="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset' --stat" \
    glod="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'" \
    glods="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' --date=short" \
    glola="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset' --all" \
    glog='git log --oneline --decorate --graph' \
    gloga='git log --oneline --decorate --graph --all' \
    gm='git merge' \
    gmom='git merge origin/$(git_main_branch)' \
    gmtl='git mergetool --no-prompt' \
    gmtlvim='git mergetool --no-prompt --tool=vimdiff' \
    gmum='git merge upstream/$(git_main_branch)' \
    gma='git merge --abort' \
    gp='git push' \
    gpd='git push --dry-run' \
    gpf='git push --force-with-lease' \
    gpf!='git push --force' \
    gpoat='git push origin --all && git push origin --tags' \
    gpr='git pull --rebase' \
    gpu='git push upstream' \
    gpv='git push -v' \
    gr='git remote' \
    gra='git remote add' \
    grb='git rebase' \
    grba='git rebase --abort' \
    grbc='git rebase --continue' \
    grbd='git rebase $(git_develop_branch)' \
    grbi='git rebase -i' \
    grbm='git rebase $(git_main_branch)' \
    grbo='git rebase --onto' \
    grbs='git rebase --skip' \
    grev='git revert' \
    grh='git reset' \
    grhh='git reset --hard' \
    groh='git reset origin/$(git_current_branch) --hard' \
    grm='git rm' \
    grmc='git rm --cached' \
    grmv='git remote rename' \
    grrm='git remote remove' \
    grs='git restore' \
    grset='git remote set-url' \
    grss='git restore --source' \
    grst='git restore --staged' \
    grt='cd "$(git rev-parse --show-toplevel || echo .)"' \
    gru='git reset --' \
    grup='git remote update' \
    grv='git remote -v' \
    gsb='git status -sb' \
    gsd='git svn dcommit' \
    gsh='git show' \
    gsi='git submodule init' \
    gsps='git show --pretty=short --show-signature' \
    gsr='git svn rebase' \
    gss='git status -s' \
    gst='git status' \
    gsta='git stash push' \
    gstaa='git stash apply' \
    gstc='git stash clear' \
    gstd='git stash drop' \
    gstl='git stash list' \
    gstp='git stash pop' \
    gsts='git stash show --text' \
    gstu='gsta --include-untracked' \
    gstall='git stash --all' \
    gsu='git submodule update' \
    gsw='git switch' \
    gswc='git switch -c' \
    gswm='git switch $(git_main_branch)' \
    gswd='git switch $(git_develop_branch)' \
    gts='git tag -s' \
    gtv='git tag | sort -V' \
    gtl='_gtl(){ git tag --sort=-v:refname -n -l "${1}*"; }; _gtl' \
    gunignore='git update-index --no-assume-unchanged' \
    gunwip='git log -n 1 | grep -q -c "\-\-wip\-\-" && git reset HEAD~1' \
    gup='git pull --rebase' \
    gupv='git pull --rebase -v' \
    gupa='git pull --rebase --autostash' \
    gupav='git pull --rebase --autostash -v' \
    glum='git pull upstream $(git_main_branch)' \
    gwch='git whatchanged -p --abbrev-commit --pretty=medium' \
    gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign -m "--wip-- [skip ci]"' \
    gam='git am' \
    gamc='git am --continue' \
    gams='git am --skip' \
    gama='git am --abort' \
    gamscp='git am --show-current-patch' \
    gt='git tag' \
    gta='_gta(){ git tag -a "$1" -m "$2" $3; }; _gta' \
    gtd='_gtd(){ git tag -d "$1"; }; _gtd'

# python aliases
alias \
    cvenv='[ ! -d .venv ] && python -m venv .venv; . ./.venv/bin/activate' \
    dvenv='type deactivate >/dev/null && deactivate' \
    rvenv='type deactivate >/dev/null; deactivate; rm -rf .venv' \
    pip='python -m pip' \
    upip='pip --disable-pip-version-check list --outdated --format=json | jq -r ".[].name" | xargs -I{} pip install --no-cache-dir -U "{}"' \
    pyprofile='python -m cProfile -o profile' \
    pytest='python -m pytest'

# programs
alias \
    x="lf" \
    vim='nvim -i NONE' \
    e='hx' \

# network
alias \
    check-ciphers="nmap -sV --script ssl-enum-ciphers"

# docker
## containers
MYSQL='docker run --name mysql-for-tests --platform=linux/amd64 --rm -e MYSQL_ROOT_PASSWORD=password -p 3333:3306 -d'
POSTGRESQL='docker run --name postgres-for-tests --rm -e POSTGRES_PASSWORD=password -p 5439:5432 -d'
CLICKHOUSE='docker run --name clickhouse-for-tests --rm -p 9321:9000 -p 8321:8123 -d'

alias \
    dmysql=$MYSQL' mysql:5.7' \
    dvmysql=$MYSQL' -v mysql-test:/var/lib/mysql mysql:5.7-debian' \
    dpostgres=$POSTGRESQL' postgres' \
    dvpostgres=$POSTGRESQL' -v postgres-test:/var/lib/postgresql postgres' \
    dclickhouse=$CLICKHOUSE' clickhouse/clickhouse-server:latest' \
    dvclickhouse=$CLICKHOUSE' -v clickhouse-test:/var/lib/clickhouse clickhouse/clickhouse-server:latest' \
    dubuntu='docker run --rm -it randomowo/ubuntu-vim bash' \
    cdubuntu='docker run --rm -it ubuntu bash'

## commands
alias \
    dpsi='docker ps --format="{{.Image}} -> {{.Names}}"'

# system specific aliases
[ -f $HOME/.caliasrc ] && source $HOME/.caliasrc

